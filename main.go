package main

import (
	"encoding/json"
	"fmt"
	"github.com/wangyi/fishpond/dao/mysql"
	"github.com/wangyi/fishpond/dao/redis"
	"github.com/wangyi/fishpond/logger"
	"github.com/wangyi/fishpond/process"
	"github.com/wangyi/fishpond/router"
	"github.com/wangyi/fishpond/setting"
	"go.uber.org/zap"
	"io/ioutil"
	"net/http"
	"time"
)

func main() {
	one()

	//file, _ := os.Open("lss.key")
	//
	//defer file.Close()
	//content, _ := ioutil.ReadAll(file)
	//fmt.Println(string(content))

}

func one() {

	//加载配置
	if err := setting.Init(); err != nil {
		fmt.Println("配置文件初始化事变", err)
		return
	}
	//初始化日志
	if err := logger.Init(); err != nil {
		fmt.Println("日志初始化失败", err)
		return
	}
	defer zap.L().Sync() //缓存日志追加到日志文件中
	zap.L().Debug("LaLa")
	//链接数据库
	if err := mysql.Init(); err != nil {
		fmt.Println("mysql 链接失败,", err)
		return
	}
	defer mysql.Close()
	//redis 初始化
	//4.初始化redis连接
	if err := redis.Init(); err != nil {
		fmt.Println("redis文件初始化失败：", err)
		return
	}
	defer redis.Close()

	/**
	  定时更新 汇率
	*/
	go func() {
		type AutoGeneratedOne struct {
			Symbol string `json:"symbol"`
			Price  string `json:"price"`
		}
		for true {
			resp, err := http.Get("https://api1.binance.com/api/v3/ticker/price?symbol=ETHUSDT")
			if err == nil {
				body, err1 := ioutil.ReadAll(resp.Body)
				if err1 == nil {
					var basket AutoGeneratedOne
					err = json.Unmarshal([]byte(string(body)), &basket)
					if err == nil {
						redis.Rdb.Set("ETHTOUSDT", basket.Price, 0)
					}
				}
			}
			time.Sleep(600 * time.Second)
		}
	}()

	/**8
	  检查授权
	*/
	go process.CheckAu(mysql.DB)
	go process.CheckMoney(mysql.DB)

	// 1.创建路
	router.Setup()
}
